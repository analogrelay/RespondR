/*** Generated by streamline fibers 0.2.2 - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) {var delay_ = fstreamline__.create(delay), delayFail_ = fstreamline__.create(delayFail); //streamline.options = { "lines" : "preserve" }
var module = QUnit.module;
var flows = require("streamline/lib/util/flows");

function delay(_, val) {
	fstreamline__.invoke(flows, "nextTick", [_], 0);
	return val;
}

function delayFail(_, err) {
	fstreamline__.invoke(flows, "nextTick", [_], 0);
	throw err;
}

module("flows");

asyncTest("each", 1, fstreamline__.create(function(_) {
	var result = 1;
	fstreamline__.invoke(flows, "each", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		result = result * delay(_, val);
	}, 0)], 0)
	strictEqual(result, 24);
	start();
}, 0))
asyncTest("map", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "map", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return 2 * delay(_, val);
	}, 0)], 0);
	deepEqual(result, [2, 4, 6, 8]);
	start();
}, 0))
asyncTest("filter", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "filter", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return delay(_, val) % 2;
	}, 0)], 0);
	deepEqual(result, [1, 3]);
	start();
}, 0))
asyncTest("every", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "every", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return delay(_, val) < 5;
	}, 0)], 0);
	strictEqual(result, true);
	start();
}, 0));
asyncTest("every", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "every", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return delay(_, val) < 3;
	}, 0)], 0);
	strictEqual(result, false);
	start();
}, 0));
asyncTest("some", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "some", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return delay(_, val) < 3;
	}, 0)], 0);
	strictEqual(result, true);
	start();
}, 0));
asyncTest("some", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "some", [_, [1, 2, 3, 4], fstreamline__.create(function(_, val) {
		return delay(_, val) < 0;
	}, 0)], 0);
	strictEqual(result, false);
	start();
}, 0));
asyncTest("reduce", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "reduce", [_, [1, 2, 3, 4], fstreamline__.create(function(_, v, val) {
		return v * delay(_, val);
	}, 0), 1], 0);
	strictEqual(result, 24);
	start();
}, 0));
asyncTest("reduceRight", 1, fstreamline__.create(function(_) {
	var result = fstreamline__.invoke(flows, "reduceRight", [_, [1, 2, 3, 4], fstreamline__.create(function(_, v, val) {
		return v * delay(_, val);
	}, 0), 1], 0);
	strictEqual(result, 24);
	start();
}, 0));
asyncTest("sort", 3, fstreamline__.create(function(_) {
	var array = [1, 2, 3, 4];
	fstreamline__.invoke(flows, "sort", [_, array, fstreamline__.create(function(_, a, b) {
		return delay(_, a - b);
	}, 0)], 0);
	deepEqual(array, [1, 2, 3, 4], "In order array sort ok");
	array = [4, 3, 2, 1];
	fstreamline__.invoke(flows, "sort", [_, array, fstreamline__.create(function(_, a, b) {
		return delay(_, a - b);
	}, 0)], 0);
	deepEqual(array, [1, 2, 3, 4], "Reverse array sort ok");
	array = [1, 4, 2, 3];
	fstreamline__.invoke(flows, "sort", [_, array, fstreamline__.create(function(_, a, b) {
		return delay(_, a - b);
	}, 0)], 0);
	deepEqual(array, [1, 2, 3, 4], "Random array sort ok");
	start();
}, 0));
asyncTest("collectAll", 4, fstreamline__.create(function(_) {
	var total = 0;
	var peak = 0;
	var count = 0;

	function doIt(i) {
		return fstreamline__.create(function(_) { var __tmp;
			count++;
			peak = Math.max(count, peak);
			 __tmp = (__tmp = delay(_, i), total += __tmp);
			count--;
			return 2 * i;
		}, 0)
	}

	var results = fstreamline__.invoke(flows.spray([doIt(1), doIt(2), doIt(3)]), "collectAll", [_], 0);
	equal(total, 6);
	ok(peak >= 2);
	equal(count, 0);
	deepEqual(results, [2, 4, 6]);
	start();
}, 0))
asyncTest("collectOne", 4, fstreamline__.create(function(_) {
	var total = 0;
	var peak = 0;
	var count = 0;

	function doIt(i) {
		return fstreamline__.create(function(_) { var __tmp;
			count++;
			peak = Math.max(count, peak);
			 __tmp = (__tmp = delay(_, i), total += __tmp);
			count--;
			return 2 * i;
		}, 0)
	}

	var result = fstreamline__.invoke(flows.spray([doIt(1), doIt(2), doIt(3)]), "collectOne", [_], 0);
	ok(total == 1 || total == 2);
	ok(peak >= 2);
	ok(count > 0);
	ok(result == 2 || result == 4);
	start();
}, 0))
asyncTest("collectAll with limit", 1, fstreamline__.create(function(_) {
	var total = 0;
	var peak = 0;
	var count = 0;

	function doIt(i) {
		return fstreamline__.create(function(_) { var __tmp;
			count++;
			peak = Math.max(count, peak);
			 __tmp = (__tmp = delay(_, i), total += __tmp);
			count--;
			return 2 * i;
		}, 0)
	}

	var results = fstreamline__.invoke(flows.spray([doIt(1), doIt(2), doIt(3)], 2), "collectAll", [_], 0);
	deepEqual([total, peak, count, results], [6, 2, 0, [2, 4, 6]]);
	start();
}, 0))
asyncTest("contexts", 3, fstreamline__.create(function(_) {var testContext_ = fstreamline__.create(testContext);
	function testContext(_, x) {
		flows.setContext({
			val: x
		});
		var y = delay(_, 2 * x);
		strictEqual(y, 2 * flows.getContext().val);
		return y + 1;
	}

	var result = fstreamline__.invoke(flows.spray([

	fstreamline__.create(function(_) {
		return testContext(_, 3);
	}, 0),

	fstreamline__.create(function(_) {
		return testContext(_, 5);
	}, 0)

	]), "collectAll", [_], 0);
	deepEqual(result, [7, 11]);
	start();
}, 0))

asyncTest("futures multiplex", 3, fstreamline__.create(function(_) {var doIt_ = fstreamline__.create(doIt);
	var result1 = 0;
	var result2 = 0;
	var result3 = 0;

	function doIt(future, _) { var __tmp;
		 __tmp = (__tmp = fstreamline__.invoke(null, future, [_], 0), result1 += __tmp);
		 __tmp = (__tmp = fstreamline__.invoke(null, future, [_], 0), result2 += __tmp);
		delay(_);
		 __tmp = (__tmp = fstreamline__.invoke(null, future, [_], 0), result3 += __tmp);
	}

	var f1 = delay_(null, 1);
	var f10 = delay_(null, 10);

	fstreamline__.invoke(flows, "collect", [_, [doIt_(f1), doIt_(f10), doIt_(f1)]], 0);

	deepEqual(result1, 12);
	deepEqual(result2, 12);
	deepEqual(result3, 12);
	start();
}, 0))
}, 0).call(this, function(err) {
  if (err) throw err;
}));